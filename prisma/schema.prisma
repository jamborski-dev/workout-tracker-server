datasource db {
  provider  = "postgresql"
  url       = env("SUPABASE_CONN_STRING")
  directUrl = env("SUPABASE_CONN_STRING_DIRECT")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id               Int               @id @default(autoincrement())
  supabaseId       String            @unique
  email            String            @unique
  username         String?
  routines         Routine[]
  routineTemplates RoutineTemplate[] // Relation to templates created by the user
}

model Routine {
  id        Int        @id @default(autoincrement())
  name      String?    @default("New Routine")
  date      DateTime   @default(now())
  userId    Int
  user      User       @relation(fields: [userId], references: [id])
  notes     String?
  movements Movement[]
}

model Movement {
  id         Int      @id @default(autoincrement())
  exerciseId Int
  exercise   Exercise @relation(fields: [exerciseId], references: [id]) // Removed onDelete: Cascade
  sets       Set[] // Relation to sets for each movement
  routineId  Int
  routine    Routine  @relation(fields: [routineId], references: [id])
  notes      String?
}

model Set {
  id            Int      @id @default(autoincrement())
  movementId    Int
  movement      Movement @relation(fields: [movementId], references: [id])
  plannedReps   Int
  actualReps    Int?
  plannedWeight Float
  actualWeight  Float?
  restTime      Int? // Rest time for this specific set, optional
}

model Exercise {
  id               Int               @id @default(autoincrement())
  name             String            @unique
  description      String?
  movements        Movement[] // Add this relation back to Movement
  plannedMovements PlannedMovement[] // Relation back to PlannedMovement
}

model RoutineTemplate {
  id               Int               @id @default(autoincrement())
  name             String // Name of the template (e.g., "Leg Day Routine")
  userId           Int
  user             User              @relation(fields: [userId], references: [id])
  plannedMovements PlannedMovement[] // Relation to predefined movements
}

model PlannedMovement {
  id                Int             @id @default(autoincrement())
  routineTemplateId Int
  routineTemplate   RoutineTemplate @relation(fields: [routineTemplateId], references: [id])
  exerciseId        Int
  exercise          Exercise        @relation(fields: [exerciseId], references: [id]) // Exercise relation
  plannedSets       PlannedSet[] // Relation to PlannedSet for dynamic sets
  notes             String?
}

model PlannedSet {
  id                Int             @id @default(autoincrement())
  plannedMovementId Int
  plannedMovement   PlannedMovement @relation(fields: [plannedMovementId], references: [id])
  plannedReps       Int
  plannedWeight     Float
  restTime          Int? // Optional rest time for this planned set
}
