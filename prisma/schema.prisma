// TODO add back in the planned movements and sets for templates once the app is more fleshed out
// TODO setup .env for local and dev

datasource db {
  provider  = "postgresql"
  url       = env("SUPABASE_DB_CONN")
  directUrl = env("SUPABASE_DB_CONN_DIRECT")
  // url      = env("LOCAL_POSTGRES_DB_CONN")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            Int            @id @default(autoincrement())
  email         String         @unique
  username      String?
  password      String
  refreshTokens RefreshToken[]
  routines      Routine[]
  // routineTemplates RoutineTemplate[] // Relation to templates created by the user
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  expiresAt DateTime
  revoked   Boolean  @default(false)
}

model Routine {
  id        Int        @id @default(autoincrement())
  name      String?    @default("New Routine")
  date      DateTime   @default(now())
  userId    Int
  user      User       @relation(fields: [userId], references: [id])
  notes     String?
  movements Movement[]
}

model Movement {
  id         Int           @id @default(autoincrement())
  order      Int           @default(0)
  exerciseId Int?
  exercise   Exercise?     @relation(fields: [exerciseId], references: [id])
  sets       MovementSet[]
  routineId  Int
  routine    Routine       @relation(fields: [routineId], references: [id])
  summary    String?
  notes      String?
}

model MovementSet {
  id            Int      @id @default(autoincrement())
  order         Int      @default(0)
  movementId    Int
  movement      Movement @relation(fields: [movementId], references: [id], onDelete: Cascade)
  plannedReps   Int?
  actualReps    Int?
  plannedWeight Float?
  actualWeight  Float?
  restTime      Int?
}

model Exercise {
  id          Int        @id @default(autoincrement())
  name        String?    @unique
  description String?
  muscleGroup String? // TODO change to its own model later on
  movements   Movement[]

  // plannedMovements PlannedMovement[] // Relation back to PlannedMovement
}

// model RoutineTemplate {
//   id               Int               @id @default(autoincrement())
//   name             String // Name of the template (e.g., "Leg Day Routine")
//   userId           Int
//   user             User              @relation(fields: [userId], references: [id])
//   plannedMovements PlannedMovement[] // Relation to predefined movements
// }

// model PlannedMovement {
//   id                Int             @id @default(autoincrement())
//   routineTemplateId Int
//   routineTemplate   RoutineTemplate @relation(fields: [routineTemplateId], references: [id])
//   exerciseId        Int
//   exercise          Exercise        @relation(fields: [exerciseId], references: [id]) // Exercise relation
//   plannedSets       PlannedSet[] // Relation to PlannedSet for dynamic sets
//   notes             String?
// }

// model PlannedSet {
//   id                Int             @id @default(autoincrement())
//   plannedMovementId Int
//   plannedMovement   PlannedMovement @relation(fields: [plannedMovementId], references: [id])
//   plannedReps       Int
//   plannedWeight     Float
//   restTime          Int? // Optional rest time for this planned set
// }
